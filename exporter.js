// Export functionality for CodeOpti Extension
class ReportExporter {
  constructor() {
    this.reportData = null;
  }

  async exportReport(format = 'markdown') {
    // Collect all analysis data
    this.reportData = this.collectReportData();
    
    switch (format) {
      case 'markdown':
        return this.exportMarkdown();
      case 'pdf':
        return this.exportPDF();
      case 'json':
        return this.exportJSON();
      default:
        throw new Error('Unsupported export format');
    }
  }

  collectReportData() {
    const data = {
      timestamp: new Date().toISOString(),
      code: window.monacoLoader.getValue(),
      language: document.getElementById('languageSelect')?.value || 'javascript',
      analysis: window.codeAnalyzer.currentAnalysis,
      optimization: window.codeOptimizer.currentOptimization,
      settings: {
        interviewMode: document.getElementById('interviewMode')?.checked || false
      }
    };

    return data;
  }

  exportMarkdown() {
    const data = this.reportData;
    let markdown = `# CodeOpti ‚ö° Analysis Report\n\n`;
    
    // Header info
    markdown += `**Generated:** ${new Date(data.timestamp).toLocaleString()}\n`;
    markdown += `**Language:** ${data.language.charAt(0).toUpperCase() + data.language.slice(1)}\n`;
    markdown += `**Interview Mode:** ${data.settings.interviewMode ? 'Enabled' : 'Disabled'}\n\n`;
    
    // Original code
    markdown += `## üìù Original Code\n\n`;
    markdown += `\`\`\`${data.language}\n${data.code}\n\`\`\`\n\n`;
    
    // Analysis section
    if (data.analysis) {
      markdown += `## üìä Complexity Analysis\n\n`;
      markdown += `| Metric | Value |\n`;
      markdown += `|--------|-------|\n`;
      markdown += `| Time Complexity | ${data.analysis.timeComplexity || 'N/A'} |\n`;
      markdown += `| Space Complexity | ${data.analysis.spaceComplexity || 'N/A'} |\n`;
      markdown += `| Best Case | ${data.analysis.bestCase || 'N/A'} |\n`;
      markdown += `| Average Case | ${data.analysis.averageCase || 'N/A'} |\n`;
      markdown += `| Worst Case | ${data.analysis.worstCase || 'N/A'} |\n\n`;
      
      if (data.analysis.analysis) {
        markdown += `### Detailed Analysis\n${data.analysis.analysis}\n\n`;
      }
      
      if (data.analysis.bottlenecks && data.analysis.bottlenecks.length > 0) {
        markdown += `### üîç Identified Bottlenecks\n\n`;
        data.analysis.bottlenecks.forEach(bottleneck => {
          markdown += `- ${bottleneck}\n`;
        });
        markdown += '\n';
      }
    }
    
    // Optimization section
    if (data.optimization) {
      markdown += `## ‚ö° Optimization Results\n\n`;
      
      if (data.optimization.qualityScore) {
        markdown += `**Quality Score:** ${data.optimization.qualityScore}/100\n\n`;
      }
      
      if (data.optimization.improvements) {
        markdown += `### Improvements Made\n${data.optimization.improvements}\n\n`;
      }
      
      if (data.optimization.changes && data.optimization.changes.length > 0) {
        markdown += `### üîß Code Changes\n\n`;
        data.optimization.changes.forEach((change, index) => {
          markdown += `${index + 1}. **Line ${change.line}**: ${change.change}\n`;
          markdown += `   - *Reason*: ${change.reason}\n\n`;
        });
      }
      
      if (data.optimization.optimizedCode) {
        markdown += `### Optimized Code\n\n`;
        markdown += `\`\`\`${data.language}\n${data.optimization.optimizedCode}\n\`\`\`\n\n`;
      }
    }
    
    // Footer
    markdown += `---\n\n`;
    markdown += `*Report generated by [CodeOpti ‚ö°](https://github.com/codeOpti) - AI-Powered Code Optimizer*\n`;
    markdown += `*For more features and updates, visit our [website](https://codeOpti.dev)*\n`;
    
    return markdown;
  }

  exportJSON() {
    return JSON.stringify(this.reportData, null, 2);
  }

  async exportPDF() {
    // For PDF export, we'll generate HTML and convert it
    const html = this.generateHTMLReport();
    
    // In a real extension, you might use a library like jsPDF
    // For now, we'll return the HTML content
    return html;
  }

  generateHTMLReport() {
    const data = this.reportData;
    
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <title>CodeOpti Analysis Report</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 40px 20px;
                background: #0a0e1a;
                color: #e2e8f0;
            }
            .header {
                text-align: center;
                margin-bottom: 40px;
                padding-bottom: 20px;
                border-bottom: 2px solid #06b6d4;
            }
            .title {
                font-size: 32px;
                background: linear-gradient(45deg, #06b6d4, #8b5cf6);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                margin-bottom: 10px;
            }
            .meta {
                color: #94a3b8;
                font-size: 14px;
            }
            .section {
                margin: 30px 0;
                padding: 20px;
                background: rgba(6, 182, 212, 0.05);
                border: 1px solid rgba(6, 182, 212, 0.2);
                border-radius: 8px;
            }
            .section h2 {
                color: #06b6d4;
                margin-top: 0;
            }
            pre {
                background: rgba(0, 0, 0, 0.3);
                padding: 16px;
                border-radius: 6px;
                overflow-x: auto;
                font-family: 'Monaco', 'Menlo', monospace;
                font-size: 13px;
            }
            .metrics {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 16px;
                margin: 20px 0;
            }
            .metric {
                background: rgba(0, 0, 0, 0.2);
                padding: 16px;
                border-radius: 6px;
                text-align: center;
            }
            .metric-label {
                color: #94a3b8;
                font-size: 12px;
                margin-bottom: 4px;
            }
            .metric-value {
                color: #06b6d4;
                font-size: 18px;
                font-weight: 600;
                font-family: monospace;
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1 class="title">CodeOpti ‚ö° Analysis Report</h1>
            <div class="meta">
                Generated: ${new Date(data.timestamp).toLocaleString()}<br>
                Language: ${data.language} | Interview Mode: ${data.settings.interviewMode ? 'On' : 'Off'}
            </div>
        </div>

        <div class="section">
            <h2>üìù Original Code</h2>
            <pre><code>${data.code}</code></pre>
        </div>

        ${data.analysis ? `
        <div class="section">
            <h2>üìä Complexity Analysis</h2>
            <div class="metrics">
                <div class="metric">
                    <div class="metric-label">Time Complexity</div>
                    <div class="metric-value">${data.analysis.timeComplexity}</div>
                </div>
                <div class="metric">
                    <div class="metric-label">Space Complexity</div>
                    <div class="metric-value">${data.analysis.spaceComplexity}</div>
                </div>
                <div class="metric">
                    <div class="metric-label">Best Case</div>
                    <div class="metric-value">${data.analysis.bestCase}</div>
                </div>
                <div class="metric">
                    <div class="metric-label">Average Case</div>
                    <div class="metric-value">${data.analysis.averageCase}</div>
                </div>
                <div class="metric">
                    <div class="metric-label">Worst Case</div>
                    <div class="metric-value">${data.analysis.worstCase}</div>
                </div>
            </div>
            ${data.analysis.analysis ? `<p>${data.analysis.analysis}</p>` : ''}
        </div>
        ` : ''}

        ${data.optimization ? `
        <div class="section">
            <h2>‚ö° Optimization Results</h2>
            ${data.optimization.qualityScore ? `<p><strong>Quality Score:</strong> ${data.optimization.qualityScore}/100</p>` : ''}
            ${data.optimization.improvements ? `<p>${data.optimization.improvements}</p>` : ''}
            ${data.optimization.optimizedCode ? `
                <h3>Optimized Code</h3>
                <pre><code>${data.optimization.optimizedCode}</code></pre>
            ` : ''}
        </div>
        ` : ''}

        <div class="section">
            <p style="text-align: center; color: #94a3b8; margin: 0;">
                Report generated by CodeOpti ‚ö° - AI-Powered Code Optimizer
            </p>
        </div>
    </body>
    </html>
    `;
  }

  async downloadFile(content, filename, type = 'text/plain') {
    const blob = new Blob([content], { type });
    const url = URL.createObjectURL(blob);
    
    // Create download link
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    
    // Cleanup
    URL.revokeObjectURL(url);
  }

  getFileName(format) {
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
    const language = document.getElementById('languageSelect')?.value || 'code';
    return `codeOpti-report-${language}-${timestamp}.${format}`;
  }
}

// Create global instance
window.reportExporter = new ReportExporter();